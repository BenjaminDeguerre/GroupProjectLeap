@startuml

class StaticGestures {
  +StaticGestures()
  +~StaticGestures()
  +StaticGestures(Leap::HandList hands)
  +StaticGesture getGesture()
  -StaticGesture detectGestureOneHand()
  -StaticGesture detectGestureTwoHands()


  -Leap::HandList hands
  -int handCount
}

class StaticGesture <<Enum>> {
  ERROR_SG
  GRAB_ONE_HAND

  ONE_FINGER_LEFT_HAND
  ...

  ONE_FINGER_RIGHT_HAND
  ...

  LEFT_ZERO_RIGHT_ZERO
  ...
}

class Filter {
  +Filter()

  +filterMean()
}

class DetectionListener {
  +DetectionListener()
  +onInit(Leap::Controller&)
  +onConnect(Leap::Controller&)
  +onDisconnect(Leap::Controller&)
  +onExit(Leap::Controller&)
	+onFrame(Leap::Controller&)
	+onFocusGained(Leap::Controller&)
	+onFocusLost(Leap::Controller&)
	+onDeviceChange(Leap::Controller&)
	+onServiceConnect(Leap::Controller&)
	+onServiceDisconnect(Leap::Controller&)

  -ModeHandler handler
  -GestValidator validator

  -int mode
  -bool selectingMode
}

class ModelHandler {
  +bool mode1(StaticGesture gesture)
  +bool mode2(StaticGesture gesture, Leap::GestureList gestures, Leap::FingerList fingers)
  -void writeLetter(char *letter);
	-void writeLetterA();
	-void writeLetterB();
	-void writeLetterC();
  -void writeLetter...();

  -Communicator communicator
}

class Communicator {
  -WSADATA WSAData
  -SOCKET sock
  -SOCKADDR_IN sin
  -int iResult

  +Communicator()
  +~Communicator()
  +sendData(string data, bool delay)
}

class GestValidator {
  +GestValidator()
	+~GestValidator()

	+void setFrameLimit(int limit)
	+int getFrameLimit()
	+void setGesture(StaticGesture gesture)
  +void update(StaticGesture gesture)
  +StaticGesture getCurrentValidGesture()

  -int count
  -int frameLimit
  -StaticGesture currentGesture
}

ModelHandler *-- Communicator
ModelHandler *-- Filter
DetectionListener *-- ModelHandler
DetectionListener *-- GestValidator
GestValidator *-- StaticGesture

hide StaticGesture methods
@enduml
